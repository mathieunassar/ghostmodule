// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Ghost.proto

#include "Ghost.pb.h"
#include "Ghost.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Ghost {
namespace internal {
namespace protobuf {

static const char* PublisherSubscriberService_method_names[] = {
  "/Ghost.internal.protobuf.PublisherSubscriberService/publications",
};

std::unique_ptr< PublisherSubscriberService::Stub> PublisherSubscriberService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PublisherSubscriberService::Stub> stub(new PublisherSubscriberService::Stub(channel));
  return stub;
}

PublisherSubscriberService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_publications_(PublisherSubscriberService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::Ghost::internal::protobuf::GhostMessage>* PublisherSubscriberService::Stub::publicationsRaw(::grpc::ClientContext* context, const ::Ghost::internal::protobuf::GhostMessageHeader& request) {
  return ::grpc::internal::ClientReaderFactory< ::Ghost::internal::protobuf::GhostMessage>::Create(channel_.get(), rpcmethod_publications_, context, request);
}

::grpc::ClientAsyncReader< ::Ghost::internal::protobuf::GhostMessage>* PublisherSubscriberService::Stub::AsyncpublicationsRaw(::grpc::ClientContext* context, const ::Ghost::internal::protobuf::GhostMessageHeader& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Ghost::internal::protobuf::GhostMessage>::Create(channel_.get(), cq, rpcmethod_publications_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Ghost::internal::protobuf::GhostMessage>* PublisherSubscriberService::Stub::PrepareAsyncpublicationsRaw(::grpc::ClientContext* context, const ::Ghost::internal::protobuf::GhostMessageHeader& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Ghost::internal::protobuf::GhostMessage>::Create(channel_.get(), cq, rpcmethod_publications_, context, request, false, nullptr);
}

PublisherSubscriberService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PublisherSubscriberService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PublisherSubscriberService::Service, ::Ghost::internal::protobuf::GhostMessageHeader, ::Ghost::internal::protobuf::GhostMessage>(
          std::mem_fn(&PublisherSubscriberService::Service::publications), this)));
}

PublisherSubscriberService::Service::~Service() {
}

::grpc::Status PublisherSubscriberService::Service::publications(::grpc::ServerContext* context, const ::Ghost::internal::protobuf::GhostMessageHeader* request, ::grpc::ServerWriter< ::Ghost::internal::protobuf::GhostMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ServerClientService_method_names[] = {
  "/Ghost.internal.protobuf.ServerClientService/connect",
};

std::unique_ptr< ServerClientService::Stub> ServerClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServerClientService::Stub> stub(new ServerClientService::Stub(channel));
  return stub;
}

ServerClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_connect_(ServerClientService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::Ghost::internal::protobuf::GhostMessage, ::Ghost::internal::protobuf::GhostMessage>* ServerClientService::Stub::connectRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::Ghost::internal::protobuf::GhostMessage, ::Ghost::internal::protobuf::GhostMessage>::Create(channel_.get(), rpcmethod_connect_, context);
}

::grpc::ClientAsyncReaderWriter< ::Ghost::internal::protobuf::GhostMessage, ::Ghost::internal::protobuf::GhostMessage>* ServerClientService::Stub::AsyncconnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Ghost::internal::protobuf::GhostMessage, ::Ghost::internal::protobuf::GhostMessage>::Create(channel_.get(), cq, rpcmethod_connect_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Ghost::internal::protobuf::GhostMessage, ::Ghost::internal::protobuf::GhostMessage>* ServerClientService::Stub::PrepareAsyncconnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Ghost::internal::protobuf::GhostMessage, ::Ghost::internal::protobuf::GhostMessage>::Create(channel_.get(), cq, rpcmethod_connect_, context, false, nullptr);
}

ServerClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerClientService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ServerClientService::Service, ::Ghost::internal::protobuf::GhostMessage, ::Ghost::internal::protobuf::GhostMessage>(
          std::mem_fn(&ServerClientService::Service::connect), this)));
}

ServerClientService::Service::~Service() {
}

::grpc::Status ServerClientService::Service::connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Ghost::internal::protobuf::GhostMessage, ::Ghost::internal::protobuf::GhostMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Ghost
}  // namespace internal
}  // namespace protobuf

