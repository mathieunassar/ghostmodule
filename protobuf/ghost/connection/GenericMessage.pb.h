// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ghost/connection/GenericMessage.proto

#ifndef PROTOBUF_INCLUDED_ghost_2fconnection_2fGenericMessage_2eproto
#define PROTOBUF_INCLUDED_ghost_2fconnection_2fGenericMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ghost_2fconnection_2fGenericMessage_2eproto 

namespace protobuf_ghost_2fconnection_2fGenericMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ghost_2fconnection_2fGenericMessage_2eproto
namespace ghost {
namespace protobuf {
namespace connection {
class GenericMessage;
class GenericMessageDefaultTypeInternal;
extern GenericMessageDefaultTypeInternal _GenericMessage_default_instance_;
class GenericMessageHeader;
class GenericMessageHeaderDefaultTypeInternal;
extern GenericMessageHeaderDefaultTypeInternal _GenericMessageHeader_default_instance_;
}  // namespace connection
}  // namespace protobuf
}  // namespace ghost
namespace google {
namespace protobuf {
template<> ::ghost::protobuf::connection::GenericMessage* Arena::CreateMaybeMessage<::ghost::protobuf::connection::GenericMessage>(Arena*);
template<> ::ghost::protobuf::connection::GenericMessageHeader* Arena::CreateMaybeMessage<::ghost::protobuf::connection::GenericMessageHeader>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ghost {
namespace protobuf {
namespace connection {

// ===================================================================

class GenericMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ghost.protobuf.connection.GenericMessage) */ {
 public:
  GenericMessage();
  virtual ~GenericMessage();

  GenericMessage(const GenericMessage& from);

  inline GenericMessage& operator=(const GenericMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenericMessage(GenericMessage&& from) noexcept
    : GenericMessage() {
    *this = ::std::move(from);
  }

  inline GenericMessage& operator=(GenericMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericMessage* internal_default_instance() {
    return reinterpret_cast<const GenericMessage*>(
               &_GenericMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GenericMessage* other);
  friend void swap(GenericMessage& a, GenericMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenericMessage* New() const final {
    return CreateMaybeMessage<GenericMessage>(NULL);
  }

  GenericMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenericMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenericMessage& from);
  void MergeFrom(const GenericMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serial = 2;
  void clear_serial();
  static const int kSerialFieldNumber = 2;
  const ::std::string& serial() const;
  void set_serial(const ::std::string& value);
  #if LANG_CXX11
  void set_serial(::std::string&& value);
  #endif
  void set_serial(const char* value);
  void set_serial(const char* value, size_t size);
  ::std::string* mutable_serial();
  ::std::string* release_serial();
  void set_allocated_serial(::std::string* serial);

  // string format = 3;
  void clear_format();
  static const int kFormatFieldNumber = 3;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .ghost.protobuf.connection.GenericMessageHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ghost::protobuf::connection::GenericMessageHeader& _internal_header() const;
  public:
  const ::ghost::protobuf::connection::GenericMessageHeader& header() const;
  ::ghost::protobuf::connection::GenericMessageHeader* release_header();
  ::ghost::protobuf::connection::GenericMessageHeader* mutable_header();
  void set_allocated_header(::ghost::protobuf::connection::GenericMessageHeader* header);

  // @@protoc_insertion_point(class_scope:ghost.protobuf.connection.GenericMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serial_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ghost::protobuf::connection::GenericMessageHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ghost_2fconnection_2fGenericMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GenericMessageHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ghost.protobuf.connection.GenericMessageHeader) */ {
 public:
  GenericMessageHeader();
  virtual ~GenericMessageHeader();

  GenericMessageHeader(const GenericMessageHeader& from);

  inline GenericMessageHeader& operator=(const GenericMessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenericMessageHeader(GenericMessageHeader&& from) noexcept
    : GenericMessageHeader() {
    *this = ::std::move(from);
  }

  inline GenericMessageHeader& operator=(GenericMessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericMessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericMessageHeader* internal_default_instance() {
    return reinterpret_cast<const GenericMessageHeader*>(
               &_GenericMessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GenericMessageHeader* other);
  friend void swap(GenericMessageHeader& a, GenericMessageHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenericMessageHeader* New() const final {
    return CreateMaybeMessage<GenericMessageHeader>(NULL);
  }

  GenericMessageHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenericMessageHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenericMessageHeader& from);
  void MergeFrom(const GenericMessageHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericMessageHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hostname = 2;
  void clear_hostname();
  static const int kHostnameFieldNumber = 2;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ghost.protobuf.connection.GenericMessageHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ghost_2fconnection_2fGenericMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenericMessage

// .ghost.protobuf.connection.GenericMessageHeader header = 1;
inline bool GenericMessage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void GenericMessage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::ghost::protobuf::connection::GenericMessageHeader& GenericMessage::_internal_header() const {
  return *header_;
}
inline const ::ghost::protobuf::connection::GenericMessageHeader& GenericMessage::header() const {
  const ::ghost::protobuf::connection::GenericMessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:ghost.protobuf.connection.GenericMessage.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ghost::protobuf::connection::GenericMessageHeader*>(
      &::ghost::protobuf::connection::_GenericMessageHeader_default_instance_);
}
inline ::ghost::protobuf::connection::GenericMessageHeader* GenericMessage::release_header() {
  // @@protoc_insertion_point(field_release:ghost.protobuf.connection.GenericMessage.header)
  
  ::ghost::protobuf::connection::GenericMessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ghost::protobuf::connection::GenericMessageHeader* GenericMessage::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ghost::protobuf::connection::GenericMessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghost.protobuf.connection.GenericMessage.header)
  return header_;
}
inline void GenericMessage::set_allocated_header(::ghost::protobuf::connection::GenericMessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ghost.protobuf.connection.GenericMessage.header)
}

// string serial = 2;
inline void GenericMessage::clear_serial() {
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericMessage::serial() const {
  // @@protoc_insertion_point(field_get:ghost.protobuf.connection.GenericMessage.serial)
  return serial_.GetNoArena();
}
inline void GenericMessage::set_serial(const ::std::string& value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ghost.protobuf.connection.GenericMessage.serial)
}
#if LANG_CXX11
inline void GenericMessage::set_serial(::std::string&& value) {
  
  serial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ghost.protobuf.connection.GenericMessage.serial)
}
#endif
inline void GenericMessage::set_serial(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ghost.protobuf.connection.GenericMessage.serial)
}
inline void GenericMessage::set_serial(const char* value, size_t size) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ghost.protobuf.connection.GenericMessage.serial)
}
inline ::std::string* GenericMessage::mutable_serial() {
  
  // @@protoc_insertion_point(field_mutable:ghost.protobuf.connection.GenericMessage.serial)
  return serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericMessage::release_serial() {
  // @@protoc_insertion_point(field_release:ghost.protobuf.connection.GenericMessage.serial)
  
  return serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericMessage::set_allocated_serial(::std::string* serial) {
  if (serial != NULL) {
    
  } else {
    
  }
  serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial);
  // @@protoc_insertion_point(field_set_allocated:ghost.protobuf.connection.GenericMessage.serial)
}

// string format = 3;
inline void GenericMessage::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericMessage::format() const {
  // @@protoc_insertion_point(field_get:ghost.protobuf.connection.GenericMessage.format)
  return format_.GetNoArena();
}
inline void GenericMessage::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ghost.protobuf.connection.GenericMessage.format)
}
#if LANG_CXX11
inline void GenericMessage::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ghost.protobuf.connection.GenericMessage.format)
}
#endif
inline void GenericMessage::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ghost.protobuf.connection.GenericMessage.format)
}
inline void GenericMessage::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ghost.protobuf.connection.GenericMessage.format)
}
inline ::std::string* GenericMessage::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:ghost.protobuf.connection.GenericMessage.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericMessage::release_format() {
  // @@protoc_insertion_point(field_release:ghost.protobuf.connection.GenericMessage.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericMessage::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:ghost.protobuf.connection.GenericMessage.format)
}

// string name = 4;
inline void GenericMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericMessage::name() const {
  // @@protoc_insertion_point(field_get:ghost.protobuf.connection.GenericMessage.name)
  return name_.GetNoArena();
}
inline void GenericMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ghost.protobuf.connection.GenericMessage.name)
}
#if LANG_CXX11
inline void GenericMessage::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ghost.protobuf.connection.GenericMessage.name)
}
#endif
inline void GenericMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ghost.protobuf.connection.GenericMessage.name)
}
inline void GenericMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ghost.protobuf.connection.GenericMessage.name)
}
inline ::std::string* GenericMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ghost.protobuf.connection.GenericMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericMessage::release_name() {
  // @@protoc_insertion_point(field_release:ghost.protobuf.connection.GenericMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ghost.protobuf.connection.GenericMessage.name)
}

// -------------------------------------------------------------------

// GenericMessageHeader

// int64 timestamp = 1;
inline void GenericMessageHeader::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GenericMessageHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:ghost.protobuf.connection.GenericMessageHeader.timestamp)
  return timestamp_;
}
inline void GenericMessageHeader::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ghost.protobuf.connection.GenericMessageHeader.timestamp)
}

// string hostname = 2;
inline void GenericMessageHeader::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenericMessageHeader::hostname() const {
  // @@protoc_insertion_point(field_get:ghost.protobuf.connection.GenericMessageHeader.hostname)
  return hostname_.GetNoArena();
}
inline void GenericMessageHeader::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ghost.protobuf.connection.GenericMessageHeader.hostname)
}
#if LANG_CXX11
inline void GenericMessageHeader::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ghost.protobuf.connection.GenericMessageHeader.hostname)
}
#endif
inline void GenericMessageHeader::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ghost.protobuf.connection.GenericMessageHeader.hostname)
}
inline void GenericMessageHeader::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ghost.protobuf.connection.GenericMessageHeader.hostname)
}
inline ::std::string* GenericMessageHeader::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:ghost.protobuf.connection.GenericMessageHeader.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenericMessageHeader::release_hostname() {
  // @@protoc_insertion_point(field_release:ghost.protobuf.connection.GenericMessageHeader.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenericMessageHeader::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:ghost.protobuf.connection.GenericMessageHeader.hostname)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace connection
}  // namespace protobuf
}  // namespace ghost

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ghost_2fconnection_2fGenericMessage_2eproto
