// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ghost/connection_grpc/ServerClientService.proto

#include "ghost/connection_grpc/ServerClientService.pb.h"
#include "ghost/connection_grpc/ServerClientService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ghost {
namespace protobuf {
namespace connectiongrpc {

static const char* ServerClientService_method_names[] = {
  "/ghost.protobuf.connectiongrpc.ServerClientService/connect",
};

std::unique_ptr< ServerClientService::Stub> ServerClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServerClientService::Stub> stub(new ServerClientService::Stub(channel));
  return stub;
}

ServerClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_connect_(ServerClientService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* ServerClientService::Stub::connectRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::google::protobuf::Any, ::google::protobuf::Any>::Create(channel_.get(), rpcmethod_connect_, context);
}

void ServerClientService::Stub::experimental_async::connect(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::Any,::google::protobuf::Any>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::google::protobuf::Any,::google::protobuf::Any>::Create(stub_->channel_.get(), stub_->rpcmethod_connect_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* ServerClientService::Stub::AsyncconnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::google::protobuf::Any, ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_connect_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* ServerClientService::Stub::PrepareAsyncconnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::google::protobuf::Any, ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_connect_, context, false, nullptr);
}

ServerClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerClientService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ServerClientService::Service, ::google::protobuf::Any, ::google::protobuf::Any>(
          std::mem_fn(&ServerClientService::Service::connect), this)));
}

ServerClientService::Service::~Service() {
}

::grpc::Status ServerClientService::Service::connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::protobuf::Any, ::google::protobuf::Any>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ghost
}  // namespace protobuf
}  // namespace connectiongrpc

