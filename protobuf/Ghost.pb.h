// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ghost.proto

#ifndef PROTOBUF_Ghost_2eproto__INCLUDED
#define PROTOBUF_Ghost_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Ghost_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGhostMessageImpl();
void InitDefaultsGhostMessage();
void InitDefaultsGhostMessageHeaderImpl();
void InitDefaultsGhostMessageHeader();
inline void InitDefaults() {
  InitDefaultsGhostMessage();
  InitDefaultsGhostMessageHeader();
}
}  // namespace protobuf_Ghost_2eproto
namespace Ghost {
namespace internal {
namespace protobuf {
class GhostMessage;
class GhostMessageDefaultTypeInternal;
extern GhostMessageDefaultTypeInternal _GhostMessage_default_instance_;
class GhostMessageHeader;
class GhostMessageHeaderDefaultTypeInternal;
extern GhostMessageHeaderDefaultTypeInternal _GhostMessageHeader_default_instance_;
}  // namespace protobuf
}  // namespace internal
}  // namespace Ghost
namespace Ghost {
namespace internal {
namespace protobuf {

// ===================================================================

class GhostMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Ghost.internal.protobuf.GhostMessage) */ {
 public:
  GhostMessage();
  virtual ~GhostMessage();

  GhostMessage(const GhostMessage& from);

  inline GhostMessage& operator=(const GhostMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GhostMessage(GhostMessage&& from) noexcept
    : GhostMessage() {
    *this = ::std::move(from);
  }

  inline GhostMessage& operator=(GhostMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GhostMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GhostMessage* internal_default_instance() {
    return reinterpret_cast<const GhostMessage*>(
               &_GhostMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GhostMessage* other);
  friend void swap(GhostMessage& a, GhostMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GhostMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  GhostMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GhostMessage& from);
  void MergeFrom(const GhostMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GhostMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .Ghost.internal.protobuf.GhostMessageHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Ghost::internal::protobuf::GhostMessageHeader& header() const;
  ::Ghost::internal::protobuf::GhostMessageHeader* release_header();
  ::Ghost::internal::protobuf::GhostMessageHeader* mutable_header();
  void set_allocated_header(::Ghost::internal::protobuf::GhostMessageHeader* header);

  // .google.protobuf.Any message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::google::protobuf::Any& message() const;
  ::google::protobuf::Any* release_message();
  ::google::protobuf::Any* mutable_message();
  void set_allocated_message(::google::protobuf::Any* message);

  // @@protoc_insertion_point(class_scope:Ghost.internal.protobuf.GhostMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Ghost::internal::protobuf::GhostMessageHeader* header_;
  ::google::protobuf::Any* message_;
  mutable int _cached_size_;
  friend struct ::protobuf_Ghost_2eproto::TableStruct;
  friend void ::protobuf_Ghost_2eproto::InitDefaultsGhostMessageImpl();
};
// -------------------------------------------------------------------

class GhostMessageHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Ghost.internal.protobuf.GhostMessageHeader) */ {
 public:
  GhostMessageHeader();
  virtual ~GhostMessageHeader();

  GhostMessageHeader(const GhostMessageHeader& from);

  inline GhostMessageHeader& operator=(const GhostMessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GhostMessageHeader(GhostMessageHeader&& from) noexcept
    : GhostMessageHeader() {
    *this = ::std::move(from);
  }

  inline GhostMessageHeader& operator=(GhostMessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GhostMessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GhostMessageHeader* internal_default_instance() {
    return reinterpret_cast<const GhostMessageHeader*>(
               &_GhostMessageHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GhostMessageHeader* other);
  friend void swap(GhostMessageHeader& a, GhostMessageHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GhostMessageHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  GhostMessageHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GhostMessageHeader& from);
  void MergeFrom(const GhostMessageHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GhostMessageHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hostname = 2;
  void clear_hostname();
  static const int kHostnameFieldNumber = 2;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Ghost.internal.protobuf.GhostMessageHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_Ghost_2eproto::TableStruct;
  friend void ::protobuf_Ghost_2eproto::InitDefaultsGhostMessageHeaderImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GhostMessage

// .Ghost.internal.protobuf.GhostMessageHeader header = 1;
inline bool GhostMessage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void GhostMessage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::Ghost::internal::protobuf::GhostMessageHeader& GhostMessage::header() const {
  const ::Ghost::internal::protobuf::GhostMessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:Ghost.internal.protobuf.GhostMessage.header)
  return p != NULL ? *p : *reinterpret_cast<const ::Ghost::internal::protobuf::GhostMessageHeader*>(
      &::Ghost::internal::protobuf::_GhostMessageHeader_default_instance_);
}
inline ::Ghost::internal::protobuf::GhostMessageHeader* GhostMessage::release_header() {
  // @@protoc_insertion_point(field_release:Ghost.internal.protobuf.GhostMessage.header)
  
  ::Ghost::internal::protobuf::GhostMessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Ghost::internal::protobuf::GhostMessageHeader* GhostMessage::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Ghost::internal::protobuf::GhostMessageHeader;
  }
  // @@protoc_insertion_point(field_mutable:Ghost.internal.protobuf.GhostMessage.header)
  return header_;
}
inline void GhostMessage::set_allocated_header(::Ghost::internal::protobuf::GhostMessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Ghost.internal.protobuf.GhostMessage.header)
}

// string name = 2;
inline void GhostMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GhostMessage::name() const {
  // @@protoc_insertion_point(field_get:Ghost.internal.protobuf.GhostMessage.name)
  return name_.GetNoArena();
}
inline void GhostMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ghost.internal.protobuf.GhostMessage.name)
}
#if LANG_CXX11
inline void GhostMessage::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ghost.internal.protobuf.GhostMessage.name)
}
#endif
inline void GhostMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ghost.internal.protobuf.GhostMessage.name)
}
inline void GhostMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ghost.internal.protobuf.GhostMessage.name)
}
inline ::std::string* GhostMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Ghost.internal.protobuf.GhostMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GhostMessage::release_name() {
  // @@protoc_insertion_point(field_release:Ghost.internal.protobuf.GhostMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GhostMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Ghost.internal.protobuf.GhostMessage.name)
}

// .google.protobuf.Any message = 3;
inline bool GhostMessage::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::google::protobuf::Any& GhostMessage::message() const {
  const ::google::protobuf::Any* p = message_;
  // @@protoc_insertion_point(field_get:Ghost.internal.protobuf.GhostMessage.message)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* GhostMessage::release_message() {
  // @@protoc_insertion_point(field_release:Ghost.internal.protobuf.GhostMessage.message)
  
  ::google::protobuf::Any* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* GhostMessage::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:Ghost.internal.protobuf.GhostMessage.message)
  return message_;
}
inline void GhostMessage::set_allocated_message(::google::protobuf::Any* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:Ghost.internal.protobuf.GhostMessage.message)
}

// -------------------------------------------------------------------

// GhostMessageHeader

// int64 timestamp = 1;
inline void GhostMessageHeader::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GhostMessageHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:Ghost.internal.protobuf.GhostMessageHeader.timestamp)
  return timestamp_;
}
inline void GhostMessageHeader::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Ghost.internal.protobuf.GhostMessageHeader.timestamp)
}

// string hostname = 2;
inline void GhostMessageHeader::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GhostMessageHeader::hostname() const {
  // @@protoc_insertion_point(field_get:Ghost.internal.protobuf.GhostMessageHeader.hostname)
  return hostname_.GetNoArena();
}
inline void GhostMessageHeader::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Ghost.internal.protobuf.GhostMessageHeader.hostname)
}
#if LANG_CXX11
inline void GhostMessageHeader::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ghost.internal.protobuf.GhostMessageHeader.hostname)
}
#endif
inline void GhostMessageHeader::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ghost.internal.protobuf.GhostMessageHeader.hostname)
}
inline void GhostMessageHeader::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ghost.internal.protobuf.GhostMessageHeader.hostname)
}
inline ::std::string* GhostMessageHeader::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:Ghost.internal.protobuf.GhostMessageHeader.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GhostMessageHeader::release_hostname() {
  // @@protoc_insertion_point(field_release:Ghost.internal.protobuf.GhostMessageHeader.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GhostMessageHeader::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:Ghost.internal.protobuf.GhostMessageHeader.hostname)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace internal
}  // namespace Ghost

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Ghost_2eproto__INCLUDED
