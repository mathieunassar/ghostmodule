// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tests.proto

#ifndef PROTOBUF_INCLUDED_tests_2eproto
#define PROTOBUF_INCLUDED_tests_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tests_2eproto 

namespace protobuf_tests_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tests_2eproto
namespace ghost {
namespace internal {
namespace protobuf {
class TestMessage1;
class TestMessage1DefaultTypeInternal;
extern TestMessage1DefaultTypeInternal _TestMessage1_default_instance_;
class TestMessage2;
class TestMessage2DefaultTypeInternal;
extern TestMessage2DefaultTypeInternal _TestMessage2_default_instance_;
}  // namespace protobuf
}  // namespace internal
}  // namespace ghost
namespace google {
namespace protobuf {
template<> ::ghost::internal::protobuf::TestMessage1* Arena::CreateMaybeMessage<::ghost::internal::protobuf::TestMessage1>(Arena*);
template<> ::ghost::internal::protobuf::TestMessage2* Arena::CreateMaybeMessage<::ghost::internal::protobuf::TestMessage2>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ghost {
namespace internal {
namespace protobuf {

// ===================================================================

class TestMessage1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ghost.internal.protobuf.TestMessage1) */ {
 public:
  TestMessage1();
  virtual ~TestMessage1();

  TestMessage1(const TestMessage1& from);

  inline TestMessage1& operator=(const TestMessage1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestMessage1(TestMessage1&& from) noexcept
    : TestMessage1() {
    *this = ::std::move(from);
  }

  inline TestMessage1& operator=(TestMessage1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMessage1* internal_default_instance() {
    return reinterpret_cast<const TestMessage1*>(
               &_TestMessage1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TestMessage1* other);
  friend void swap(TestMessage1& a, TestMessage1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestMessage1* New() const final {
    return CreateMaybeMessage<TestMessage1>(NULL);
  }

  TestMessage1* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestMessage1& from);
  void MergeFrom(const TestMessage1& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // string field1 = 1;
  void clear_field1();
  static const int kField1FieldNumber = 1;
  const ::std::string& field1() const;
  void set_field1(const ::std::string& value);
  #if LANG_CXX11
  void set_field1(::std::string&& value);
  #endif
  void set_field1(const char* value);
  void set_field1(const char* value, size_t size);
  ::std::string* mutable_field1();
  ::std::string* release_field1();
  void set_allocated_field1(::std::string* field1);

  // string field2 = 2;
  void clear_field2();
  static const int kField2FieldNumber = 2;
  const ::std::string& field2() const;
  void set_field2(const ::std::string& value);
  #if LANG_CXX11
  void set_field2(::std::string&& value);
  #endif
  void set_field2(const char* value);
  void set_field2(const char* value, size_t size);
  ::std::string* mutable_field2();
  ::std::string* release_field2();
  void set_allocated_field2(::std::string* field2);

  // int64 field3 = 3;
  void clear_field3();
  static const int kField3FieldNumber = 3;
  ::google::protobuf::int64 field3() const;
  void set_field3(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ghost.internal.protobuf.TestMessage1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr field1_;
  ::google::protobuf::internal::ArenaStringPtr field2_;
  ::google::protobuf::int64 field3_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestMessage2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ghost.internal.protobuf.TestMessage2) */ {
 public:
  TestMessage2();
  virtual ~TestMessage2();

  TestMessage2(const TestMessage2& from);

  inline TestMessage2& operator=(const TestMessage2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestMessage2(TestMessage2&& from) noexcept
    : TestMessage2() {
    *this = ::std::move(from);
  }

  inline TestMessage2& operator=(TestMessage2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMessage2* internal_default_instance() {
    return reinterpret_cast<const TestMessage2*>(
               &_TestMessage2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TestMessage2* other);
  friend void swap(TestMessage2& a, TestMessage2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestMessage2* New() const final {
    return CreateMaybeMessage<TestMessage2>(NULL);
  }

  TestMessage2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestMessage2& from);
  void MergeFrom(const TestMessage2& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string field1 = 1;
  void clear_field1();
  static const int kField1FieldNumber = 1;
  const ::std::string& field1() const;
  void set_field1(const ::std::string& value);
  #if LANG_CXX11
  void set_field1(::std::string&& value);
  #endif
  void set_field1(const char* value);
  void set_field1(const char* value, size_t size);
  ::std::string* mutable_field1();
  ::std::string* release_field1();
  void set_allocated_field1(::std::string* field1);

  // @@protoc_insertion_point(class_scope:ghost.internal.protobuf.TestMessage2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr field1_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tests_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMessage1

// string field1 = 1;
inline void TestMessage1::clear_field1() {
  field1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestMessage1::field1() const {
  // @@protoc_insertion_point(field_get:ghost.internal.protobuf.TestMessage1.field1)
  return field1_.GetNoArena();
}
inline void TestMessage1::set_field1(const ::std::string& value) {
  
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ghost.internal.protobuf.TestMessage1.field1)
}
#if LANG_CXX11
inline void TestMessage1::set_field1(::std::string&& value) {
  
  field1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ghost.internal.protobuf.TestMessage1.field1)
}
#endif
inline void TestMessage1::set_field1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ghost.internal.protobuf.TestMessage1.field1)
}
inline void TestMessage1::set_field1(const char* value, size_t size) {
  
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ghost.internal.protobuf.TestMessage1.field1)
}
inline ::std::string* TestMessage1::mutable_field1() {
  
  // @@protoc_insertion_point(field_mutable:ghost.internal.protobuf.TestMessage1.field1)
  return field1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestMessage1::release_field1() {
  // @@protoc_insertion_point(field_release:ghost.internal.protobuf.TestMessage1.field1)
  
  return field1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestMessage1::set_allocated_field1(::std::string* field1) {
  if (field1 != NULL) {
    
  } else {
    
  }
  field1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field1);
  // @@protoc_insertion_point(field_set_allocated:ghost.internal.protobuf.TestMessage1.field1)
}

// string field2 = 2;
inline void TestMessage1::clear_field2() {
  field2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestMessage1::field2() const {
  // @@protoc_insertion_point(field_get:ghost.internal.protobuf.TestMessage1.field2)
  return field2_.GetNoArena();
}
inline void TestMessage1::set_field2(const ::std::string& value) {
  
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ghost.internal.protobuf.TestMessage1.field2)
}
#if LANG_CXX11
inline void TestMessage1::set_field2(::std::string&& value) {
  
  field2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ghost.internal.protobuf.TestMessage1.field2)
}
#endif
inline void TestMessage1::set_field2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ghost.internal.protobuf.TestMessage1.field2)
}
inline void TestMessage1::set_field2(const char* value, size_t size) {
  
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ghost.internal.protobuf.TestMessage1.field2)
}
inline ::std::string* TestMessage1::mutable_field2() {
  
  // @@protoc_insertion_point(field_mutable:ghost.internal.protobuf.TestMessage1.field2)
  return field2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestMessage1::release_field2() {
  // @@protoc_insertion_point(field_release:ghost.internal.protobuf.TestMessage1.field2)
  
  return field2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestMessage1::set_allocated_field2(::std::string* field2) {
  if (field2 != NULL) {
    
  } else {
    
  }
  field2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field2);
  // @@protoc_insertion_point(field_set_allocated:ghost.internal.protobuf.TestMessage1.field2)
}

// int64 field3 = 3;
inline void TestMessage1::clear_field3() {
  field3_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TestMessage1::field3() const {
  // @@protoc_insertion_point(field_get:ghost.internal.protobuf.TestMessage1.field3)
  return field3_;
}
inline void TestMessage1::set_field3(::google::protobuf::int64 value) {
  
  field3_ = value;
  // @@protoc_insertion_point(field_set:ghost.internal.protobuf.TestMessage1.field3)
}

// repeated string tags = 4;
inline int TestMessage1::tags_size() const {
  return tags_.size();
}
inline void TestMessage1::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& TestMessage1::tags(int index) const {
  // @@protoc_insertion_point(field_get:ghost.internal.protobuf.TestMessage1.tags)
  return tags_.Get(index);
}
inline ::std::string* TestMessage1::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ghost.internal.protobuf.TestMessage1.tags)
  return tags_.Mutable(index);
}
inline void TestMessage1::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ghost.internal.protobuf.TestMessage1.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestMessage1::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ghost.internal.protobuf.TestMessage1.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestMessage1::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ghost.internal.protobuf.TestMessage1.tags)
}
inline void TestMessage1::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ghost.internal.protobuf.TestMessage1.tags)
}
inline ::std::string* TestMessage1::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ghost.internal.protobuf.TestMessage1.tags)
  return tags_.Add();
}
inline void TestMessage1::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ghost.internal.protobuf.TestMessage1.tags)
}
#if LANG_CXX11
inline void TestMessage1::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ghost.internal.protobuf.TestMessage1.tags)
}
#endif
inline void TestMessage1::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ghost.internal.protobuf.TestMessage1.tags)
}
inline void TestMessage1::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ghost.internal.protobuf.TestMessage1.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestMessage1::tags() const {
  // @@protoc_insertion_point(field_list:ghost.internal.protobuf.TestMessage1.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestMessage1::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ghost.internal.protobuf.TestMessage1.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// TestMessage2

// string field1 = 1;
inline void TestMessage2::clear_field1() {
  field1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestMessage2::field1() const {
  // @@protoc_insertion_point(field_get:ghost.internal.protobuf.TestMessage2.field1)
  return field1_.GetNoArena();
}
inline void TestMessage2::set_field1(const ::std::string& value) {
  
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ghost.internal.protobuf.TestMessage2.field1)
}
#if LANG_CXX11
inline void TestMessage2::set_field1(::std::string&& value) {
  
  field1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ghost.internal.protobuf.TestMessage2.field1)
}
#endif
inline void TestMessage2::set_field1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ghost.internal.protobuf.TestMessage2.field1)
}
inline void TestMessage2::set_field1(const char* value, size_t size) {
  
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ghost.internal.protobuf.TestMessage2.field1)
}
inline ::std::string* TestMessage2::mutable_field1() {
  
  // @@protoc_insertion_point(field_mutable:ghost.internal.protobuf.TestMessage2.field1)
  return field1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestMessage2::release_field1() {
  // @@protoc_insertion_point(field_release:ghost.internal.protobuf.TestMessage2.field1)
  
  return field1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestMessage2::set_allocated_field1(::std::string* field1) {
  if (field1 != NULL) {
    
  } else {
    
  }
  field1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field1);
  // @@protoc_insertion_point(field_set_allocated:ghost.internal.protobuf.TestMessage2.field1)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace internal
}  // namespace ghost

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tests_2eproto
